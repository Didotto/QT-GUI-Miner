package controller;

import java.io.IOException;


import javafx.fxml.FXML;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import model.DataModel;
import javafx.scene.control.Button;

import javafx.beans.binding.BooleanBinding;
import javafx.beans.binding.Bindings;

import view.AlertDialog;
import javafx.scene.control.Alert.AlertType;

/**
 * This class manages some events generated by the graphic elements present in the "GearView" view
 */


public class GearController extends Controller{
	@FXML
	private AnchorPane ConnectionPane;
	
	@FXML
	private TextField ipAddress;
	
	@FXML
	private TextField port;
	
	@FXML
	private Button connectionButton;
	
	@FXML
	private Button resetButton;
	
	private BooleanBinding isIpAddressFieldEmpty;
	private BooleanBinding isPortFieldEmpty;
	@FXML
	
	/**
	 * Builds the bindings of textfields of ip addres and port  
	 */
	
	public void initialize() {
		
		isIpAddressFieldEmpty = Bindings.isEmpty(ipAddress.textProperty());
		isPortFieldEmpty = Bindings.isEmpty(port.textProperty());
		
	}
	
	/**
	 * Builds an object instance of GearController and initialize the attributes 
	 * Handles binds of buttons and textfields
	 * @param model the info of the client
	 * @param controlledStage references to the stage of the window
	 */
	
	public void init (DataModel model, Stage controlledStage) {
		super.init(model, controlledStage);
		if (!model.isConnected()) {
			connectionButton.disableProperty().bind(isIpAddressFieldEmpty.or(isPortFieldEmpty));
			resetButton.disableProperty().bind(isIpAddressFieldEmpty.and(isPortFieldEmpty));
		}else {
			connectionButton.setText("Disconnect");
			ipAddress.setDisable(true);
			port.setDisable(true);
			resetButton.setDisable(true);
			
		}
	}
	/**
	 * RE for the ip
	 * @param ip ip address
	 */
	
	private boolean re_ip(final String ip) {
	    String pattern = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
			     "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
			     "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
			     "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
	    return ip.matches(pattern);
	}
	
	/**
	 * Handler for the event generated by the click of the "Reset" button
	 * @param event the event generated by Reset click 
	 */
	
	public void resetClicked (MouseEvent event) {
		ipAddress.clear();
		port.clear();
	}
	
	/**
	 * Handler for the event generated by the click of the "Connection" button (try the connection to the server otherwise inform the user)
	 * @param event the event generated by Connection click 
	 */
	
	public void connectionClicked (MouseEvent event) {
		if (connectionButton.getText().equals("Connect")) {
			String ipAddr = ipAddress.getText();
			int port_conn = new Integer(port.getText()).intValue();
			if (re_ip(ipAddr)){
					if (port_conn>=1 && port_conn<=65535){
						try {
							model.connect(ipAddr, port_conn);
							controlledStage.close();
						} catch (IOException e) {
							new AlertDialog(AlertType.ERROR,
									"CONNECTION FAILED",
									"CONNECTION PROBLEMS",
									"There is a problem with the server... Try to replace IP or Port!",
									"connection_failed.png"
									);
						}
					}else {
						new AlertDialog(AlertType.WARNING,
								"CONNECTION FAILED",
								"CONNECTION PROBLEMS",
								"The Port doesn't respect the standards...Try again!"
								);
					}
				}else {
					new AlertDialog(AlertType.ERROR,
							"CONNECTION FAILED",
							"CONNECTION PROBLEMS",
							"The IP Address doesn't respect the standards...Try again!"
							);
				}
		}else {
			try {
			model.disconnect();
			controlledStage.close();
			}catch (IOException e){
				
			}
		}
	}
	
}
